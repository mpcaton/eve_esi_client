=begin
#EVE Swagger Interface

#An OpenAPI for EVE Online

OpenAPI spec version: 0.7.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'
require 'date'

# Unit tests for EveESIClient::GetCharactersCharacterIdWalletJournal200Ok
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'GetCharactersCharacterIdWalletJournal200Ok' do
  before do
    # run before each test
    @instance = EveESIClient::GetCharactersCharacterIdWalletJournal200Ok.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of GetCharactersCharacterIdWalletJournal200Ok' do
    it 'should create an instance of GetCharactersCharacterIdWalletJournal200Ok' do
      expect(@instance).to be_instance_of(EveESIClient::GetCharactersCharacterIdWalletJournal200Ok)
    end
  end
  describe 'test attribute "date"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "ref_id"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "ref_type"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["player_trading", "market_transaction", "gm_cash_transfer", "mission_reward", "clone_activation", "inheritance", "player_donation", "corporation_payment", "docking_fee", "office_rental_fee", "factory_slot_rental_fee", "repair_bill", "bounty", "bounty_prize", "insurance", "mission_expiration", "mission_completion", "shares", "courier_mission_escrow", "mission_cost", "agent_miscellaneous", "lp_store", "agent_location_services", "agent_donation", "agent_security_services", "agent_mission_collateral_paid", "agent_mission_collateral_refunded", "agents_preward", "agent_mission_reward", "agent_mission_time_bonus_reward", "cspa", "cspaofflinerefund", "corporation_account_withdrawal", "corporation_dividend_payment", "corporation_registration_fee", "corporation_logo_change_cost", "release_of_impounded_property", "market_escrow", "agent_services_rendered", "market_fine_paid", "corporation_liquidation", "brokers_fee", "corporation_bulk_payment", "alliance_registration_fee", "war_fee", "alliance_maintainance_fee", "contraband_fine", "clone_transfer", "acceleration_gate_fee", "transaction_tax", "jump_clone_installation_fee", "manufacturing", "researching_technology", "researching_time_productivity", "researching_material_productivity", "copying", "reverse_engineering", "contract_auction_bid", "contract_auction_bid_refund", "contract_collateral", "contract_reward_refund", "contract_auction_sold", "contract_reward", "contract_collateral_refund", "contract_collateral_payout", "contract_price", "contract_brokers_fee", "contract_sales_tax", "contract_deposit", "contract_deposit_sales_tax", "contract_auction_bid_corp", "contract_collateral_deposited_corp", "contract_price_payment_corp", "contract_brokers_fee_corp", "contract_deposit_corp", "contract_deposit_refund", "contract_reward_deposited", "contract_reward_deposited_corp", "bounty_prizes", "advertisement_listing_fee", "medal_creation", "medal_issued", "dna_modification_fee", "sovereignity_bill", "bounty_prize_corporation_tax", "agent_mission_reward_corporation_tax", "agent_mission_time_bonus_reward_corporation_tax", "upkeep_adjustment_fee", "planetary_import_tax", "planetary_export_tax", "planetary_construction", "corporate_reward_payout", "bounty_surcharge", "contract_reversal", "corporate_reward_tax", "store_purchase", "store_purchase_refund", "datacore_fee", "war_fee_surrender", "war_ally_contract", "bounty_reimbursement", "kill_right_fee", "security_processing_fee", "industry_job_tax", "infrastructure_hub_maintenance", "asset_safety_recovery_tax", "opportunity_reward", "project_discovery_reward", "project_discovery_tax", "reprocessing_tax", "jump_clone_activation_fee", "operation_bonus"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.ref_type = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "first_party_id"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "first_party_type"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["character", "corporation", "alliance", "faction"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.first_party_type = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "second_party_id"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "second_party_type"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
       #validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["character", "corporation", "alliance", "faction"])
       #validator.allowable_values.each do |value|
       #  expect { @instance.second_party_type = value }.not_to raise_error
       #end
    end
  end

  describe 'test attribute "amount"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "balance"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "reason"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "tax_reciever_id"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "tax"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "extra_info"' do
    it 'should work' do
       # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end

